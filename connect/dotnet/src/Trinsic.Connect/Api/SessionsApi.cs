/*
 * Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Net.Http;
using Trinsic.Connect.Client;
using Trinsic.Connect.Model;

namespace Trinsic.Connect.Api;


/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface ISessionsApiSync : IApiAccessor
{
    #region Synchronous Operations
    /// <summary>
    /// Cancel a Session by its ID
    /// </summary>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"></param>
    /// <returns>CancelSessionResponse</returns>
    CancelSessionResponse CancelSession(string sessionId);

    /// <summary>
    /// Cancel a Session by its ID
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"></param>
    /// <returns>ApiResponse of CancelSessionResponse</returns>
    ApiResponse<CancelSessionResponse> CancelSessionWithHttpInfo(string sessionId);
    /// <summary>
    /// Create a Session to verify a user&#39;s identity
    /// </summary>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="createSessionRequest"> (optional)</param>
    /// <returns>CreateSessionResponse</returns>
    CreateSessionResponse CreateSession(CreateSessionRequest? createSessionRequest = default(CreateSessionRequest?));

    /// <summary>
    /// Create a Session to verify a user&#39;s identity
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="createSessionRequest"> (optional)</param>
    /// <returns>ApiResponse of CreateSessionResponse</returns>
    ApiResponse<CreateSessionResponse> CreateSessionWithHttpInfo(CreateSessionRequest? createSessionRequest = default(CreateSessionRequest?));
    /// <summary>
    /// Exchange a Results Access Key for Identity Data
    /// </summary>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"></param>
    /// <param name="exchangeResultsKeyRequest"> (optional)</param>
    /// <returns>ExchangeResultsKeyResponse</returns>
    ExchangeResultsKeyResponse ExchangeResultsKey(string sessionId, ExchangeResultsKeyRequest? exchangeResultsKeyRequest = default(ExchangeResultsKeyRequest?));

    /// <summary>
    /// Exchange a Results Access Key for Identity Data
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"></param>
    /// <param name="exchangeResultsKeyRequest"> (optional)</param>
    /// <returns>ApiResponse of ExchangeResultsKeyResponse</returns>
    ApiResponse<ExchangeResultsKeyResponse> ExchangeResultsKeyWithHttpInfo(string sessionId, ExchangeResultsKeyRequest? exchangeResultsKeyRequest = default(ExchangeResultsKeyRequest?));
    /// <summary>
    /// Get a Session by its ID
    /// </summary>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"></param>
    /// <returns>GetSessionResponse</returns>
    GetSessionResponse GetSession(string sessionId);

    /// <summary>
    /// Get a Session by its ID
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"></param>
    /// <returns>ApiResponse of GetSessionResponse</returns>
    ApiResponse<GetSessionResponse> GetSessionWithHttpInfo(string sessionId);
    /// <summary>
    /// List Sessions created by your account
    /// </summary>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="orderBy">The field by which sessions should be ordered (optional)</param>
    /// <param name="orderDirection"> (optional)</param>
    /// <param name="pageSize">The number of items to return per page - - must be between &#x60;1&#x60; and &#x60;10&#x60; (optional)</param>
    /// <param name="page">The page number to return - - starts at &#x60;1&#x60; (optional)</param>
    /// <returns>ListSessionsResponse</returns>
    ListSessionsResponse ListSessions(SessionOrdering? orderBy = default(SessionOrdering?), OrderDirection? orderDirection = default(OrderDirection?), int? pageSize = default(int?), int? page = default(int?));

    /// <summary>
    /// List Sessions created by your account
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="orderBy">The field by which sessions should be ordered (optional)</param>
    /// <param name="orderDirection"> (optional)</param>
    /// <param name="pageSize">The number of items to return per page - - must be between &#x60;1&#x60; and &#x60;10&#x60; (optional)</param>
    /// <param name="page">The page number to return - - starts at &#x60;1&#x60; (optional)</param>
    /// <returns>ApiResponse of ListSessionsResponse</returns>
    ApiResponse<ListSessionsResponse> ListSessionsWithHttpInfo(SessionOrdering? orderBy = default(SessionOrdering?), OrderDirection? orderDirection = default(OrderDirection?), int? pageSize = default(int?), int? page = default(int?));
    /// <summary>
    /// Redact a Session, removing all identity data from Trinsic&#39;s servers.                Identity data that a user has chosen to save in their passkey-protected wallet will not be deleted.
    /// </summary>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"></param>
    /// <returns></returns>
    void RedactSession(string sessionId);

    /// <summary>
    /// Redact a Session, removing all identity data from Trinsic&#39;s servers.                Identity data that a user has chosen to save in their passkey-protected wallet will not be deleted.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"></param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> RedactSessionWithHttpInfo(string sessionId);
    #endregion Synchronous Operations
}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface ISessionsApiAsync : IApiAccessor
{
    #region Asynchronous Operations
    /// <summary>
    /// Cancel a Session by its ID
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of CancelSessionResponse</returns>
    System.Threading.Tasks.Task<CancelSessionResponse> CancelSessionAsync(string sessionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Cancel a Session by its ID
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CancelSessionResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<CancelSessionResponse>> CancelSessionWithHttpInfoAsync(string sessionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Create a Session to verify a user&#39;s identity
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="createSessionRequest"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of CreateSessionResponse</returns>
    System.Threading.Tasks.Task<CreateSessionResponse> CreateSessionAsync(CreateSessionRequest? createSessionRequest = default(CreateSessionRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Create a Session to verify a user&#39;s identity
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="createSessionRequest"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreateSessionResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<CreateSessionResponse>> CreateSessionWithHttpInfoAsync(CreateSessionRequest? createSessionRequest = default(CreateSessionRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Exchange a Results Access Key for Identity Data
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"></param>
    /// <param name="exchangeResultsKeyRequest"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ExchangeResultsKeyResponse</returns>
    System.Threading.Tasks.Task<ExchangeResultsKeyResponse> ExchangeResultsKeyAsync(string sessionId, ExchangeResultsKeyRequest? exchangeResultsKeyRequest = default(ExchangeResultsKeyRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Exchange a Results Access Key for Identity Data
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"></param>
    /// <param name="exchangeResultsKeyRequest"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ExchangeResultsKeyResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<ExchangeResultsKeyResponse>> ExchangeResultsKeyWithHttpInfoAsync(string sessionId, ExchangeResultsKeyRequest? exchangeResultsKeyRequest = default(ExchangeResultsKeyRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Get a Session by its ID
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetSessionResponse</returns>
    System.Threading.Tasks.Task<GetSessionResponse> GetSessionAsync(string sessionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a Session by its ID
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetSessionResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<GetSessionResponse>> GetSessionWithHttpInfoAsync(string sessionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// List Sessions created by your account
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="orderBy">The field by which sessions should be ordered (optional)</param>
    /// <param name="orderDirection"> (optional)</param>
    /// <param name="pageSize">The number of items to return per page - - must be between &#x60;1&#x60; and &#x60;10&#x60; (optional)</param>
    /// <param name="page">The page number to return - - starts at &#x60;1&#x60; (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ListSessionsResponse</returns>
    System.Threading.Tasks.Task<ListSessionsResponse> ListSessionsAsync(SessionOrdering? orderBy = default(SessionOrdering?), OrderDirection? orderDirection = default(OrderDirection?), int? pageSize = default(int?), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// List Sessions created by your account
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="orderBy">The field by which sessions should be ordered (optional)</param>
    /// <param name="orderDirection"> (optional)</param>
    /// <param name="pageSize">The number of items to return per page - - must be between &#x60;1&#x60; and &#x60;10&#x60; (optional)</param>
    /// <param name="page">The page number to return - - starts at &#x60;1&#x60; (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListSessionsResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<ListSessionsResponse>> ListSessionsWithHttpInfoAsync(SessionOrdering? orderBy = default(SessionOrdering?), OrderDirection? orderDirection = default(OrderDirection?), int? pageSize = default(int?), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Redact a Session, removing all identity data from Trinsic&#39;s servers.                Identity data that a user has chosen to save in their passkey-protected wallet will not be deleted.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    System.Threading.Tasks.Task RedactSessionAsync(string sessionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Redact a Session, removing all identity data from Trinsic&#39;s servers.                Identity data that a user has chosen to save in their passkey-protected wallet will not be deleted.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    System.Threading.Tasks.Task<ApiResponse<object>> RedactSessionWithHttpInfoAsync(string sessionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    #endregion Asynchronous Operations
}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface ISessionsApi : ISessionsApiSync, ISessionsApiAsync
{

}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public partial class SessionsApi : IDisposable, ISessionsApi
{
    private Trinsic.Connect.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

    /// <summary>
    /// Initializes a new instance of the <see cref="SessionsApi"/> class.
    /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
    /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
    /// </summary>
    /// <returns></returns>
    public SessionsApi() : this((string)null)
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="SessionsApi"/> class.
    /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
    /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
    /// </summary>
    /// <param name="basePath">The target service's base path in URL format.</param>
    /// <exception cref="ArgumentException"></exception>
    /// <returns></returns>
    public SessionsApi(string basePath)
    {
        Configuration = Trinsic.Connect.Client.Configuration.MergeConfigurations(
            Trinsic.Connect.Client.GlobalConfiguration.Instance,
            new Trinsic.Connect.Client.Configuration { BasePath = basePath }
        );
        ApiClient = new Trinsic.Connect.Client.ApiClient(Configuration.BasePath);
        Client = ApiClient;
        AsynchronousClient = ApiClient;
        ExceptionFactory = Trinsic.Connect.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="SessionsApi"/> class using Configuration object.
    /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
    /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
    /// </summary>
    /// <param name="configuration">An instance of Configuration.</param>
    /// <exception cref="ArgumentNullException"></exception>
    /// <returns></returns>
    public SessionsApi(Trinsic.Connect.Client.Configuration configuration)
    {
        if (configuration == null)
        {
            throw new ArgumentNullException("configuration");
        }

        Configuration = Trinsic.Connect.Client.Configuration.MergeConfigurations(
            Trinsic.Connect.Client.GlobalConfiguration.Instance,
            configuration
        );
        ApiClient = new Trinsic.Connect.Client.ApiClient(Configuration.BasePath);
        Client = ApiClient;
        AsynchronousClient = ApiClient;
        ExceptionFactory = Trinsic.Connect.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="SessionsApi"/> class.
    /// </summary>
    /// <param name="client">An instance of HttpClient.</param>
    /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
    /// <exception cref="ArgumentNullException"></exception>
    /// <returns></returns>
    /// <remarks>
    /// Some configuration settings will not be applied without passing an HttpClientHandler.
    /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
    /// </remarks>
    public SessionsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="SessionsApi"/> class.
    /// </summary>
    /// <param name="client">An instance of HttpClient.</param>
    /// <param name="basePath">The target service's base path in URL format.</param>
    /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
    /// <exception cref="ArgumentNullException"></exception>
    /// <exception cref="ArgumentException"></exception>
    /// <returns></returns>
    /// <remarks>
    /// Some configuration settings will not be applied without passing an HttpClientHandler.
    /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
    /// </remarks>
    public SessionsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
    {
        if (client == null)
        {
            throw new ArgumentNullException("client");
        }

        Configuration = Trinsic.Connect.Client.Configuration.MergeConfigurations(
            Trinsic.Connect.Client.GlobalConfiguration.Instance,
            new Trinsic.Connect.Client.Configuration { BasePath = basePath }
        );
        ApiClient = new Trinsic.Connect.Client.ApiClient(client, Configuration.BasePath, handler);
        Client = ApiClient;
        AsynchronousClient = ApiClient;
        ExceptionFactory = Trinsic.Connect.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="SessionsApi"/> class using Configuration object.
    /// </summary>
    /// <param name="client">An instance of HttpClient.</param>
    /// <param name="configuration">An instance of Configuration.</param>
    /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
    /// <exception cref="ArgumentNullException"></exception>
    /// <returns></returns>
    /// <remarks>
    /// Some configuration settings will not be applied without passing an HttpClientHandler.
    /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
    /// </remarks>
    public SessionsApi(HttpClient client, Trinsic.Connect.Client.Configuration configuration, HttpClientHandler handler = null)
    {
        if (configuration == null)
        {
            throw new ArgumentNullException("configuration");
        }

        if (client == null)
        {
            throw new ArgumentNullException("client");
        }

        Configuration = Trinsic.Connect.Client.Configuration.MergeConfigurations(
            Trinsic.Connect.Client.GlobalConfiguration.Instance,
            configuration
        );
        ApiClient = new Trinsic.Connect.Client.ApiClient(client, Configuration.BasePath, handler);
        Client = ApiClient;
        AsynchronousClient = ApiClient;
        ExceptionFactory = Trinsic.Connect.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="SessionsApi"/> class
    /// using a Configuration object and client instance.
    /// </summary>
    /// <param name="client">The client interface for synchronous API access.</param>
    /// <param name="asyncClient">The client interface for asynchronous API access.</param>
    /// <param name="configuration">The configuration object.</param>
    /// <exception cref="ArgumentNullException"></exception>
    public SessionsApi(Trinsic.Connect.Client.ISynchronousClient client, Trinsic.Connect.Client.IAsynchronousClient asyncClient, Trinsic.Connect.Client.IReadableConfiguration configuration)
    {
        Client = client ?? throw new ArgumentNullException("client");
        AsynchronousClient = asyncClient ?? throw new ArgumentNullException("asyncClient");
        Configuration = configuration ?? throw new ArgumentNullException("configuration");
        ExceptionFactory = Trinsic.Connect.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Disposes resources if they were created by us
    /// </summary>
    public void Dispose()
    {
        ApiClient?.Dispose();
    }

    /// <summary>
    /// Holds the ApiClient if created
    /// </summary>
    public Trinsic.Connect.Client.ApiClient ApiClient { get; set; } = null;

    /// <summary>
    /// The client for accessing this underlying API asynchronously.
    /// </summary>
    public Trinsic.Connect.Client.IAsynchronousClient AsynchronousClient { get; set; }

    /// <summary>
    /// The client for accessing this underlying API synchronously.
    /// </summary>
    public Trinsic.Connect.Client.ISynchronousClient Client { get; set; }

    /// <summary>
    /// Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    public string GetBasePath()
    {
        return Configuration.BasePath;
    }

    /// <summary>
    /// Gets or sets the configuration object
    /// </summary>
    /// <value>An instance of the Configuration</value>
    public Trinsic.Connect.Client.IReadableConfiguration Configuration { get; set; }

    /// <summary>
    /// Provides a factory method hook for the creation of exceptions.
    /// </summary>
    public Trinsic.Connect.Client.ExceptionFactory ExceptionFactory
    {
        get
        {
            if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
            {
                throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
            }

            return _exceptionFactory;
        }
        set => _exceptionFactory = value;
    }

    /// <summary>
    /// Cancel a Session by its ID 
    /// </summary>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"></param>
    /// <returns>CancelSessionResponse</returns>
    public CancelSessionResponse CancelSession(string sessionId)
    {
        var localVarResponse = CancelSessionWithHttpInfo(sessionId);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Cancel a Session by its ID 
    /// </summary>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"></param>
    /// <returns>ApiResponse of CancelSessionResponse</returns>
    public Trinsic.Connect.Client.ApiResponse<CancelSessionResponse> CancelSessionWithHttpInfo(string sessionId)
    {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null)
        {
            throw new Trinsic.Connect.Client.ApiException(400, "Missing required parameter 'sessionId' when calling SessionsApi->CancelSession");
        }

        var localVarRequestOptions = new Trinsic.Connect.Client.RequestOptions();

        var _contentTypes = new string[] {
        };

        // to determine the Accept header
        var _accepts = new string[] {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = Trinsic.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = Trinsic.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("sessionId", Trinsic.Connect.Client.ClientUtils.ParameterToString(sessionId)); // path parameter

        // authentication (Bearer) required
        // bearer authentication required
        if (!string.IsNullOrEmpty(Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
        {
            localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);
        }

        // make the HTTP request
        var localVarResponse = Client.Post<CancelSessionResponse>("/api/v1/sessions/{sessionId}/cancel", localVarRequestOptions, Configuration);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("CancelSession", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    /// Cancel a Session by its ID 
    /// </summary>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of CancelSessionResponse</returns>
    public async System.Threading.Tasks.Task<CancelSessionResponse> CancelSessionAsync(string sessionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
        var localVarResponse = await CancelSessionWithHttpInfoAsync(sessionId, cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Cancel a Session by its ID 
    /// </summary>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CancelSessionResponse)</returns>
    public async System.Threading.Tasks.Task<Trinsic.Connect.Client.ApiResponse<CancelSessionResponse>> CancelSessionWithHttpInfoAsync(string sessionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null)
        {
            throw new Trinsic.Connect.Client.ApiException(400, "Missing required parameter 'sessionId' when calling SessionsApi->CancelSession");
        }

        var localVarRequestOptions = new Trinsic.Connect.Client.RequestOptions();

        var _contentTypes = new string[] {
        };

        // to determine the Accept header
        var _accepts = new string[] {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = Trinsic.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = Trinsic.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("sessionId", Trinsic.Connect.Client.ClientUtils.ParameterToString(sessionId)); // path parameter

        // authentication (Bearer) required
        // bearer authentication required
        if (!string.IsNullOrEmpty(Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
        {
            localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);
        }

        // make the HTTP request

        var localVarResponse = await AsynchronousClient.PostAsync<CancelSessionResponse>("/api/v1/sessions/{sessionId}/cancel", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("CancelSession", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    /// Create a Session to verify a user&#39;s identity 
    /// </summary>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="createSessionRequest"> (optional)</param>
    /// <returns>CreateSessionResponse</returns>
    public CreateSessionResponse CreateSession(CreateSessionRequest? createSessionRequest = default(CreateSessionRequest?))
    {
        var localVarResponse = CreateSessionWithHttpInfo(createSessionRequest);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Create a Session to verify a user&#39;s identity 
    /// </summary>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="createSessionRequest"> (optional)</param>
    /// <returns>ApiResponse of CreateSessionResponse</returns>
    public Trinsic.Connect.Client.ApiResponse<CreateSessionResponse> CreateSessionWithHttpInfo(CreateSessionRequest? createSessionRequest = default(CreateSessionRequest?))
    {
        var localVarRequestOptions = new Trinsic.Connect.Client.RequestOptions();

        var _contentTypes = new string[] {
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new string[] {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = Trinsic.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = Trinsic.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.Data = createSessionRequest;

        // authentication (Bearer) required
        // bearer authentication required
        if (!string.IsNullOrEmpty(Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
        {
            localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);
        }

        // make the HTTP request
        var localVarResponse = Client.Post<CreateSessionResponse>("/api/v1/sessions", localVarRequestOptions, Configuration);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("CreateSession", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    /// Create a Session to verify a user&#39;s identity 
    /// </summary>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="createSessionRequest"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of CreateSessionResponse</returns>
    public async System.Threading.Tasks.Task<CreateSessionResponse> CreateSessionAsync(CreateSessionRequest? createSessionRequest = default(CreateSessionRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
        var localVarResponse = await CreateSessionWithHttpInfoAsync(createSessionRequest, cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Create a Session to verify a user&#39;s identity 
    /// </summary>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="createSessionRequest"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreateSessionResponse)</returns>
    public async System.Threading.Tasks.Task<Trinsic.Connect.Client.ApiResponse<CreateSessionResponse>> CreateSessionWithHttpInfoAsync(CreateSessionRequest? createSessionRequest = default(CreateSessionRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {

        var localVarRequestOptions = new Trinsic.Connect.Client.RequestOptions();

        var _contentTypes = new string[] {
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new string[] {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = Trinsic.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = Trinsic.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.Data = createSessionRequest;

        // authentication (Bearer) required
        // bearer authentication required
        if (!string.IsNullOrEmpty(Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
        {
            localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);
        }

        // make the HTTP request

        var localVarResponse = await AsynchronousClient.PostAsync<CreateSessionResponse>("/api/v1/sessions", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("CreateSession", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    /// Exchange a Results Access Key for Identity Data 
    /// </summary>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"></param>
    /// <param name="exchangeResultsKeyRequest"> (optional)</param>
    /// <returns>ExchangeResultsKeyResponse</returns>
    public ExchangeResultsKeyResponse ExchangeResultsKey(string sessionId, ExchangeResultsKeyRequest? exchangeResultsKeyRequest = default(ExchangeResultsKeyRequest?))
    {
        var localVarResponse = ExchangeResultsKeyWithHttpInfo(sessionId, exchangeResultsKeyRequest);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Exchange a Results Access Key for Identity Data 
    /// </summary>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"></param>
    /// <param name="exchangeResultsKeyRequest"> (optional)</param>
    /// <returns>ApiResponse of ExchangeResultsKeyResponse</returns>
    public Trinsic.Connect.Client.ApiResponse<ExchangeResultsKeyResponse> ExchangeResultsKeyWithHttpInfo(string sessionId, ExchangeResultsKeyRequest? exchangeResultsKeyRequest = default(ExchangeResultsKeyRequest?))
    {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null)
        {
            throw new Trinsic.Connect.Client.ApiException(400, "Missing required parameter 'sessionId' when calling SessionsApi->ExchangeResultsKey");
        }

        var localVarRequestOptions = new Trinsic.Connect.Client.RequestOptions();

        var _contentTypes = new string[] {
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new string[] {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = Trinsic.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = Trinsic.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("sessionId", Trinsic.Connect.Client.ClientUtils.ParameterToString(sessionId)); // path parameter
        localVarRequestOptions.Data = exchangeResultsKeyRequest;

        // authentication (Bearer) required
        // bearer authentication required
        if (!string.IsNullOrEmpty(Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
        {
            localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);
        }

        // make the HTTP request
        var localVarResponse = Client.Post<ExchangeResultsKeyResponse>("/api/v1/sessions/{sessionId}/results", localVarRequestOptions, Configuration);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ExchangeResultsKey", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    /// Exchange a Results Access Key for Identity Data 
    /// </summary>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"></param>
    /// <param name="exchangeResultsKeyRequest"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ExchangeResultsKeyResponse</returns>
    public async System.Threading.Tasks.Task<ExchangeResultsKeyResponse> ExchangeResultsKeyAsync(string sessionId, ExchangeResultsKeyRequest? exchangeResultsKeyRequest = default(ExchangeResultsKeyRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
        var localVarResponse = await ExchangeResultsKeyWithHttpInfoAsync(sessionId, exchangeResultsKeyRequest, cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Exchange a Results Access Key for Identity Data 
    /// </summary>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"></param>
    /// <param name="exchangeResultsKeyRequest"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ExchangeResultsKeyResponse)</returns>
    public async System.Threading.Tasks.Task<Trinsic.Connect.Client.ApiResponse<ExchangeResultsKeyResponse>> ExchangeResultsKeyWithHttpInfoAsync(string sessionId, ExchangeResultsKeyRequest? exchangeResultsKeyRequest = default(ExchangeResultsKeyRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null)
        {
            throw new Trinsic.Connect.Client.ApiException(400, "Missing required parameter 'sessionId' when calling SessionsApi->ExchangeResultsKey");
        }

        var localVarRequestOptions = new Trinsic.Connect.Client.RequestOptions();

        var _contentTypes = new string[] {
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new string[] {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = Trinsic.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = Trinsic.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("sessionId", Trinsic.Connect.Client.ClientUtils.ParameterToString(sessionId)); // path parameter
        localVarRequestOptions.Data = exchangeResultsKeyRequest;

        // authentication (Bearer) required
        // bearer authentication required
        if (!string.IsNullOrEmpty(Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
        {
            localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);
        }

        // make the HTTP request

        var localVarResponse = await AsynchronousClient.PostAsync<ExchangeResultsKeyResponse>("/api/v1/sessions/{sessionId}/results", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ExchangeResultsKey", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    /// Get a Session by its ID 
    /// </summary>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"></param>
    /// <returns>GetSessionResponse</returns>
    public GetSessionResponse GetSession(string sessionId)
    {
        var localVarResponse = GetSessionWithHttpInfo(sessionId);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get a Session by its ID 
    /// </summary>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"></param>
    /// <returns>ApiResponse of GetSessionResponse</returns>
    public Trinsic.Connect.Client.ApiResponse<GetSessionResponse> GetSessionWithHttpInfo(string sessionId)
    {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null)
        {
            throw new Trinsic.Connect.Client.ApiException(400, "Missing required parameter 'sessionId' when calling SessionsApi->GetSession");
        }

        var localVarRequestOptions = new Trinsic.Connect.Client.RequestOptions();

        var _contentTypes = new string[] {
        };

        // to determine the Accept header
        var _accepts = new string[] {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = Trinsic.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = Trinsic.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("sessionId", Trinsic.Connect.Client.ClientUtils.ParameterToString(sessionId)); // path parameter

        // authentication (Bearer) required
        // bearer authentication required
        if (!string.IsNullOrEmpty(Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
        {
            localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);
        }

        // make the HTTP request
        var localVarResponse = Client.Get<GetSessionResponse>("/api/v1/sessions/{sessionId}", localVarRequestOptions, Configuration);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("GetSession", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    /// Get a Session by its ID 
    /// </summary>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetSessionResponse</returns>
    public async System.Threading.Tasks.Task<GetSessionResponse> GetSessionAsync(string sessionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
        var localVarResponse = await GetSessionWithHttpInfoAsync(sessionId, cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get a Session by its ID 
    /// </summary>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetSessionResponse)</returns>
    public async System.Threading.Tasks.Task<Trinsic.Connect.Client.ApiResponse<GetSessionResponse>> GetSessionWithHttpInfoAsync(string sessionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null)
        {
            throw new Trinsic.Connect.Client.ApiException(400, "Missing required parameter 'sessionId' when calling SessionsApi->GetSession");
        }

        var localVarRequestOptions = new Trinsic.Connect.Client.RequestOptions();

        var _contentTypes = new string[] {
        };

        // to determine the Accept header
        var _accepts = new string[] {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = Trinsic.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = Trinsic.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("sessionId", Trinsic.Connect.Client.ClientUtils.ParameterToString(sessionId)); // path parameter

        // authentication (Bearer) required
        // bearer authentication required
        if (!string.IsNullOrEmpty(Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
        {
            localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);
        }

        // make the HTTP request

        var localVarResponse = await AsynchronousClient.GetAsync<GetSessionResponse>("/api/v1/sessions/{sessionId}", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("GetSession", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    /// List Sessions created by your account 
    /// </summary>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="orderBy">The field by which sessions should be ordered (optional)</param>
    /// <param name="orderDirection"> (optional)</param>
    /// <param name="pageSize">The number of items to return per page - - must be between &#x60;1&#x60; and &#x60;10&#x60; (optional)</param>
    /// <param name="page">The page number to return - - starts at &#x60;1&#x60; (optional)</param>
    /// <returns>ListSessionsResponse</returns>
    public ListSessionsResponse ListSessions(SessionOrdering? orderBy = default(SessionOrdering?), OrderDirection? orderDirection = default(OrderDirection?), int? pageSize = default(int?), int? page = default(int?))
    {
        var localVarResponse = ListSessionsWithHttpInfo(orderBy, orderDirection, pageSize, page);
        return localVarResponse.Data;
    }

    /// <summary>
    /// List Sessions created by your account 
    /// </summary>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="orderBy">The field by which sessions should be ordered (optional)</param>
    /// <param name="orderDirection"> (optional)</param>
    /// <param name="pageSize">The number of items to return per page - - must be between &#x60;1&#x60; and &#x60;10&#x60; (optional)</param>
    /// <param name="page">The page number to return - - starts at &#x60;1&#x60; (optional)</param>
    /// <returns>ApiResponse of ListSessionsResponse</returns>
    public Trinsic.Connect.Client.ApiResponse<ListSessionsResponse> ListSessionsWithHttpInfo(SessionOrdering? orderBy = default(SessionOrdering?), OrderDirection? orderDirection = default(OrderDirection?), int? pageSize = default(int?), int? page = default(int?))
    {
        var localVarRequestOptions = new Trinsic.Connect.Client.RequestOptions();

        var _contentTypes = new string[] {
        };

        // to determine the Accept header
        var _accepts = new string[] {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = Trinsic.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = Trinsic.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        if (orderBy != null)
        {
            localVarRequestOptions.QueryParameters.Add(Trinsic.Connect.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
        }

        if (orderDirection != null)
        {
            localVarRequestOptions.QueryParameters.Add(Trinsic.Connect.Client.ClientUtils.ParameterToMultiMap("", "OrderDirection", orderDirection));
        }

        if (pageSize != null)
        {
            localVarRequestOptions.QueryParameters.Add(Trinsic.Connect.Client.ClientUtils.ParameterToMultiMap("", "PageSize", pageSize));
        }

        if (page != null)
        {
            localVarRequestOptions.QueryParameters.Add(Trinsic.Connect.Client.ClientUtils.ParameterToMultiMap("", "Page", page));
        }

        // authentication (Bearer) required
        // bearer authentication required
        if (!string.IsNullOrEmpty(Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
        {
            localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);
        }

        // make the HTTP request
        var localVarResponse = Client.Get<ListSessionsResponse>("/api/v1/sessions", localVarRequestOptions, Configuration);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ListSessions", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    /// List Sessions created by your account 
    /// </summary>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="orderBy">The field by which sessions should be ordered (optional)</param>
    /// <param name="orderDirection"> (optional)</param>
    /// <param name="pageSize">The number of items to return per page - - must be between &#x60;1&#x60; and &#x60;10&#x60; (optional)</param>
    /// <param name="page">The page number to return - - starts at &#x60;1&#x60; (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ListSessionsResponse</returns>
    public async System.Threading.Tasks.Task<ListSessionsResponse> ListSessionsAsync(SessionOrdering? orderBy = default(SessionOrdering?), OrderDirection? orderDirection = default(OrderDirection?), int? pageSize = default(int?), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
        var localVarResponse = await ListSessionsWithHttpInfoAsync(orderBy, orderDirection, pageSize, page, cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// List Sessions created by your account 
    /// </summary>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="orderBy">The field by which sessions should be ordered (optional)</param>
    /// <param name="orderDirection"> (optional)</param>
    /// <param name="pageSize">The number of items to return per page - - must be between &#x60;1&#x60; and &#x60;10&#x60; (optional)</param>
    /// <param name="page">The page number to return - - starts at &#x60;1&#x60; (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListSessionsResponse)</returns>
    public async System.Threading.Tasks.Task<Trinsic.Connect.Client.ApiResponse<ListSessionsResponse>> ListSessionsWithHttpInfoAsync(SessionOrdering? orderBy = default(SessionOrdering?), OrderDirection? orderDirection = default(OrderDirection?), int? pageSize = default(int?), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {

        var localVarRequestOptions = new Trinsic.Connect.Client.RequestOptions();

        var _contentTypes = new string[] {
        };

        // to determine the Accept header
        var _accepts = new string[] {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = Trinsic.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = Trinsic.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        if (orderBy != null)
        {
            localVarRequestOptions.QueryParameters.Add(Trinsic.Connect.Client.ClientUtils.ParameterToMultiMap("", "OrderBy", orderBy));
        }

        if (orderDirection != null)
        {
            localVarRequestOptions.QueryParameters.Add(Trinsic.Connect.Client.ClientUtils.ParameterToMultiMap("", "OrderDirection", orderDirection));
        }

        if (pageSize != null)
        {
            localVarRequestOptions.QueryParameters.Add(Trinsic.Connect.Client.ClientUtils.ParameterToMultiMap("", "PageSize", pageSize));
        }

        if (page != null)
        {
            localVarRequestOptions.QueryParameters.Add(Trinsic.Connect.Client.ClientUtils.ParameterToMultiMap("", "Page", page));
        }

        // authentication (Bearer) required
        // bearer authentication required
        if (!string.IsNullOrEmpty(Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
        {
            localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);
        }

        // make the HTTP request

        var localVarResponse = await AsynchronousClient.GetAsync<ListSessionsResponse>("/api/v1/sessions", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ListSessions", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    /// Redact a Session, removing all identity data from Trinsic&#39;s servers.                Identity data that a user has chosen to save in their passkey-protected wallet will not be deleted. 
    /// </summary>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"></param>
    /// <returns></returns>
    public void RedactSession(string sessionId)
    {
        RedactSessionWithHttpInfo(sessionId);
    }

    /// <summary>
    /// Redact a Session, removing all identity data from Trinsic&#39;s servers.                Identity data that a user has chosen to save in their passkey-protected wallet will not be deleted. 
    /// </summary>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"></param>
    /// <returns>ApiResponse of Object(void)</returns>
    public Trinsic.Connect.Client.ApiResponse<Object> RedactSessionWithHttpInfo(string sessionId)
    {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null)
        {
            throw new Trinsic.Connect.Client.ApiException(400, "Missing required parameter 'sessionId' when calling SessionsApi->RedactSession");
        }

        var localVarRequestOptions = new Trinsic.Connect.Client.RequestOptions();

        var _contentTypes = new string[] {
        };

        // to determine the Accept header
        var _accepts = new string[] {
            "application/json"
        };

        var localVarContentType = Trinsic.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = Trinsic.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("sessionId", Trinsic.Connect.Client.ClientUtils.ParameterToString(sessionId)); // path parameter

        // authentication (Bearer) required
        // bearer authentication required
        if (!string.IsNullOrEmpty(Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
        {
            localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);
        }

        // make the HTTP request
        var localVarResponse = Client.Post<object>("/api/v1/sessions/{sessionId}/redact", localVarRequestOptions, Configuration);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("RedactSession", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    /// Redact a Session, removing all identity data from Trinsic&#39;s servers.                Identity data that a user has chosen to save in their passkey-protected wallet will not be deleted. 
    /// </summary>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async System.Threading.Tasks.Task RedactSessionAsync(string sessionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
        await RedactSessionWithHttpInfoAsync(sessionId, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// Redact a Session, removing all identity data from Trinsic&#39;s servers.                Identity data that a user has chosen to save in their passkey-protected wallet will not be deleted. 
    /// </summary>
    /// <exception cref="Trinsic.Connect.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sessionId"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async System.Threading.Tasks.Task<Trinsic.Connect.Client.ApiResponse<Object>> RedactSessionWithHttpInfoAsync(string sessionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
        // verify the required parameter 'sessionId' is set
        if (sessionId == null)
        {
            throw new Trinsic.Connect.Client.ApiException(400, "Missing required parameter 'sessionId' when calling SessionsApi->RedactSession");
        }

        var localVarRequestOptions = new Trinsic.Connect.Client.RequestOptions();

        var _contentTypes = new string[] {
        };

        // to determine the Accept header
        var _accepts = new string[] {
            "application/json"
        };

        var localVarContentType = Trinsic.Connect.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = Trinsic.Connect.Client.ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("sessionId", Trinsic.Connect.Client.ClientUtils.ParameterToString(sessionId)); // path parameter

        // authentication (Bearer) required
        // bearer authentication required
        if (!string.IsNullOrEmpty(Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
        {
            localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);
        }

        // make the HTTP request

        var localVarResponse = await AsynchronousClient.PostAsync<object>("/api/v1/sessions/{sessionId}/redact", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("RedactSession", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }
}
